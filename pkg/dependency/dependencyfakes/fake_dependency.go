// Code generated by counterfeiter. DO NOT EDIT.
package dependencyfakes

import (
	"sync"

	"github.com/paketo-buildpacks/dep-server/pkg/dependency"
)

type FakeDependency struct {
	GetAllVersionRefsStub        func() ([]string, error)
	getAllVersionRefsMutex       sync.RWMutex
	getAllVersionRefsArgsForCall []struct {
	}
	getAllVersionRefsReturns struct {
		result1 []string
		result2 error
	}
	getAllVersionRefsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	GetDependencyVersionStub        func(string) (dependency.DepVersion, error)
	getDependencyVersionMutex       sync.RWMutex
	getDependencyVersionArgsForCall []struct {
		arg1 string
	}
	getDependencyVersionReturns struct {
		result1 dependency.DepVersion
		result2 error
	}
	getDependencyVersionReturnsOnCall map[int]struct {
		result1 dependency.DepVersion
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDependency) GetAllVersionRefs() ([]string, error) {
	fake.getAllVersionRefsMutex.Lock()
	ret, specificReturn := fake.getAllVersionRefsReturnsOnCall[len(fake.getAllVersionRefsArgsForCall)]
	fake.getAllVersionRefsArgsForCall = append(fake.getAllVersionRefsArgsForCall, struct {
	}{})
	fake.recordInvocation("GetAllVersionRefs", []interface{}{})
	fake.getAllVersionRefsMutex.Unlock()
	if fake.GetAllVersionRefsStub != nil {
		return fake.GetAllVersionRefsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAllVersionRefsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDependency) GetAllVersionRefsCallCount() int {
	fake.getAllVersionRefsMutex.RLock()
	defer fake.getAllVersionRefsMutex.RUnlock()
	return len(fake.getAllVersionRefsArgsForCall)
}

func (fake *FakeDependency) GetAllVersionRefsCalls(stub func() ([]string, error)) {
	fake.getAllVersionRefsMutex.Lock()
	defer fake.getAllVersionRefsMutex.Unlock()
	fake.GetAllVersionRefsStub = stub
}

func (fake *FakeDependency) GetAllVersionRefsReturns(result1 []string, result2 error) {
	fake.getAllVersionRefsMutex.Lock()
	defer fake.getAllVersionRefsMutex.Unlock()
	fake.GetAllVersionRefsStub = nil
	fake.getAllVersionRefsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeDependency) GetAllVersionRefsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.getAllVersionRefsMutex.Lock()
	defer fake.getAllVersionRefsMutex.Unlock()
	fake.GetAllVersionRefsStub = nil
	if fake.getAllVersionRefsReturnsOnCall == nil {
		fake.getAllVersionRefsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.getAllVersionRefsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeDependency) GetDependencyVersion(arg1 string) (dependency.DepVersion, error) {
	fake.getDependencyVersionMutex.Lock()
	ret, specificReturn := fake.getDependencyVersionReturnsOnCall[len(fake.getDependencyVersionArgsForCall)]
	fake.getDependencyVersionArgsForCall = append(fake.getDependencyVersionArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetDependencyVersion", []interface{}{arg1})
	fake.getDependencyVersionMutex.Unlock()
	if fake.GetDependencyVersionStub != nil {
		return fake.GetDependencyVersionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getDependencyVersionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDependency) GetDependencyVersionCallCount() int {
	fake.getDependencyVersionMutex.RLock()
	defer fake.getDependencyVersionMutex.RUnlock()
	return len(fake.getDependencyVersionArgsForCall)
}

func (fake *FakeDependency) GetDependencyVersionCalls(stub func(string) (dependency.DepVersion, error)) {
	fake.getDependencyVersionMutex.Lock()
	defer fake.getDependencyVersionMutex.Unlock()
	fake.GetDependencyVersionStub = stub
}

func (fake *FakeDependency) GetDependencyVersionArgsForCall(i int) string {
	fake.getDependencyVersionMutex.RLock()
	defer fake.getDependencyVersionMutex.RUnlock()
	argsForCall := fake.getDependencyVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDependency) GetDependencyVersionReturns(result1 dependency.DepVersion, result2 error) {
	fake.getDependencyVersionMutex.Lock()
	defer fake.getDependencyVersionMutex.Unlock()
	fake.GetDependencyVersionStub = nil
	fake.getDependencyVersionReturns = struct {
		result1 dependency.DepVersion
		result2 error
	}{result1, result2}
}

func (fake *FakeDependency) GetDependencyVersionReturnsOnCall(i int, result1 dependency.DepVersion, result2 error) {
	fake.getDependencyVersionMutex.Lock()
	defer fake.getDependencyVersionMutex.Unlock()
	fake.GetDependencyVersionStub = nil
	if fake.getDependencyVersionReturnsOnCall == nil {
		fake.getDependencyVersionReturnsOnCall = make(map[int]struct {
			result1 dependency.DepVersion
			result2 error
		})
	}
	fake.getDependencyVersionReturnsOnCall[i] = struct {
		result1 dependency.DepVersion
		result2 error
	}{result1, result2}
}

func (fake *FakeDependency) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAllVersionRefsMutex.RLock()
	defer fake.getAllVersionRefsMutex.RUnlock()
	fake.getDependencyVersionMutex.RLock()
	defer fake.getDependencyVersionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDependency) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dependency.Dependency = new(FakeDependency)
